import React, { useState, useEffect } from "react";
import "./FoodOrDietRecommendation.css";
import jsPDF from "jspdf";

export default function FoodOrDietRecommendation() {
  const [preferences, setPreferences] = useState({
    dietType: "veg",
    allergies: "",
    calorieGoal: "",
    age: "",
    weight: "",
    healthGoal: "",
  });
  const [searchQuery, setSearchQuery] = useState("");
  const [recommendations, setRecommendations] = useState([]);
  const [tip, setTip] = useState("");
  const [loading, setLoading] = useState(false);
  const [waterIntake, setWaterIntake] = useState(0);
  const [favorites, setFavorites] = useState([]);
  const [activeTab, setActiveTab] = useState("recommendations");
  const [nutritionSummary, setNutritionSummary] = useState(null);

  const GEMINI_API_KEY = "AIzaSyDsDZJmml18dqhEwVDPSoZdhesZStaBDJ0";

  useEffect(() => {
    const savedFavorites = localStorage.getItem("dietFavorites");
    if (savedFavorites) {
      setFavorites(JSON.parse(savedFavorites));
    }
    fetchTipOfTheDay();

    const savedWaterIntake = localStorage.getItem("waterIntake");
    if (savedWaterIntake) {
      setWaterIntake(parseInt(savedWaterIntake, 10));
    }
  }, []);

  const handleInputChange = (e) => {
    setPreferences({ ...preferences, [e.target.name]: e.target.value });
  };

  const exportToPDF = () => {
    const doc = new jsPDF();

    doc.setFontSize(20);
    doc.text("Personalized Diet Plan", 105, 15, { align: "center" });
    doc.setFontSize(10);
    doc.text(`Generated on: ${new Date().toLocaleDateString()}`, 105, 22, {
      align: "center",
    });

    doc.setFontSize(14);
    doc.text("Personal Information", 20, 35);
    doc.setFontSize(12);
    doc.text(`• Age: ${preferences.age || "Not specified"}`, 20, 45);
    doc.text(`• Weight: ${preferences.weight || "Not specified"} kg`, 20, 55);
    doc.text(`• Diet Type: ${getDietTypeLabel(preferences.dietType)}`, 20, 65);
    doc.text(`• Allergies: ${preferences.allergies || "None"}`, 20, 75);
    doc.text(
      `• Daily Calorie Goal: ${preferences.calorieGoal || "Not specified"} kcal`,
      20,
      85
    );
    doc.text(
      `• Health Goal: ${preferences.healthGoal || "Not specified"}`,
      20,
      95
    );

    let yPosition = 110;
    doc.setFontSize(14);
    doc.text("Diet Plan Recommendations", 20, yPosition);
    yPosition += 10;
    doc.setFontSize(12);

    recommendations.forEach((line) => {
      if (yPosition > 270) {
        doc.addPage();
        yPosition = 20;
      }
      if (
        line.toLowerCase().includes("options") ||
        line.toLowerCase().includes("snacks")
      ) {
        doc.setFont("helvetica", "bold");
        doc.setTextColor(40, 180, 99);
        doc.text(line, 20, yPosition);
        doc.setFont("helvetica", "normal");
        doc.setTextColor(0, 0, 0);
      } else {
        doc.text(`- ${line}`, 20, yPosition);
      }
      yPosition += 7;
    });

    if (nutritionSummary) {
      if (yPosition > 250) {
        doc.addPage();
        yPosition = 20;
      }
      doc.setFontSize(14);
      doc.text("Nutrition Summary", 20, yPosition);
      yPosition += 10;
      doc.setFontSize(12);
      nutritionSummary.split("\n").forEach((line) => {
        if (yPosition > 270) {
          doc.addPage();
          yPosition = 20;
        }
        doc.text(line, 20, yPosition);
        yPosition += 7;
      });
    }

    if (yPosition > 250) {
      doc.addPage();
      yPosition = 20;
    }
    doc.setFontSize(14);
    doc.text("Hydration Tracking", 20, yPosition);
    yPosition += 10;
    doc.setFontSize(12);
    doc.text(`• Current Water Intake: ${waterIntake}ml`, 20, yPosition);
    yPosition += 7;
    doc.text(
      `• Recommended Daily Intake: ${calculateRecommendedWater()}ml`,
      20,
      yPosition
    );

    doc.setFontSize(10);
    doc.setTextColor(100);
    doc.text(
      "Generated by Health App - For informational purposes only",
      105,
      285,
      { align: "center" }
    );

    doc.save(`diet-plan-${new Date().toISOString().slice(0, 10)}.pdf`);
  };

  const calculateRecommendedWater = () => {
    const weight = parseInt(preferences.weight) || 70;
    return Math.round(weight * 30);
  };

  const getDietTypeLabel = (value) => {
    switch (value) {
      case "veg":
        return "Vegetarian";
      case "non-veg":
        return "Non-Vegetarian";
      case "vegan":
        return "Vegan";
      case "keto":
        return "Keto";
      default:
        return value;
    }
  };

  const fetchRecommendations = async () => {
    setLoading(true);
    try {
      const prompt = `
        Provide a personalized food and diet plan for:
        Age: ${preferences.age}
        Weight: ${preferences.weight} kg
        Diet type: ${preferences.dietType}
        Allergies: ${preferences.allergies || "None"}
        Calorie Goal: ${preferences.calorieGoal} kcal/day
        Health Goal: ${preferences.healthGoal}
        
        Include:
        - Breakfast options
        - Lunch options
        - Dinner options
        - Healthy snacks
        - Nutrition summary
      `;

      const response = await fetch(
        `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${GEMINI_API_KEY}`,
        {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            contents: [{ parts: [{ text: prompt }] }],
          }),
        }
      );

      const data = await response.json();
      if (data?.candidates?.[0]?.content?.parts?.[0]?.text) {
        const output = data.candidates[0].content.parts[0].text;
        const lines = output.split("\n").filter(Boolean);
        const summaryIndex = lines.findIndex((line) =>
          line.toLowerCase().includes("nutrition summary")
        );

        setRecommendations(
          lines.slice(0, summaryIndex !== -1 ? summaryIndex : lines.length)
        );

        if (summaryIndex !== -1) {
          setNutritionSummary(lines.slice(summaryIndex).join("\n"));
        } else {
          setNutritionSummary(null);
        }

        setActiveTab("recommendations");
      } else {
        setRecommendations(["No recommendations found."]);
        setNutritionSummary(null);
      }
    } catch (error) {
      console.error(error);
      setRecommendations(["Error fetching recommendations."]);
      setNutritionSummary(null);
    }
    setLoading(false);
  };

  const fetchTipOfTheDay = async () => {
    try {
      const response = await fetch(
        `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${GEMINI_API_KEY}`,
        {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            contents: [
              { parts: [{ text: "Give me a short healthy eating tip in one sentence." }] },
            ],
          }),
        }
      );
      const data = await response.json();
      if (data?.candidates?.[0]?.content?.parts?.[0]?.text) {
        setTip(data.candidates[0].content.parts[0].text);
      }
    } catch (error) {
      console.error(error);
    }
  };

  const addToFavorites = (item) => {
    if (!favorites.includes(item)) {
      const newFavorites = [...favorites, item];
      setFavorites(newFavorites);
      localStorage.setItem("dietFavorites", JSON.stringify(newFavorites));
    }
  };

  const removeFromFavorites = (item) => {
    const newFavorites = favorites.filter((fav) => fav !== item);
    setFavorites(newFavorites);
    localStorage.setItem("dietFavorites", JSON.stringify(newFavorites));
  };

  const addWaterGlass = () => {
    setWaterIntake((prev) => {
      const newIntake = prev + 250;
      localStorage.setItem("waterIntake", newIntake.toString());
      return newIntake;
    });
  };

  const resetWaterIntake = () => {
    setWaterIntake(0);
    localStorage.setItem("waterIntake", "0");
  };

  return (
    <div className="main-content">
      <h1 className="main-heading">Food & Diet Recommendation</h1>

      <div className="food-diet-layout">
        {/* LEFT SIDE */}
        <div className="food-diet-left">
          <div className="form-section">
            <h2>🥗 Personalized Nutrition Planner</h2>

            <div className="input-grid">
              <input type="number" name="age" placeholder="Age" value={preferences.age} onChange={handleInputChange} />
              <input type="number" name="weight" placeholder="Weight (kg)" value={preferences.weight} onChange={handleInputChange} />
              <select name="dietType" value={preferences.dietType} onChange={handleInputChange}>
                <option value="veg">Vegetarian</option>
                <option value="non-veg">Non-Vegetarian</option>
                <option value="vegan">Vegan</option>
                <option value="keto">Keto</option>
                <option value="paleo">Paleo</option>
                <option value="mediterranean">Mediterranean</option>
              </select>
              <input type="text" name="allergies" placeholder="Allergies (optional)" value={preferences.allergies} onChange={handleInputChange} />
              <input type="number" name="calorieGoal" placeholder="Daily Calorie Goal (kcal)" value={preferences.calorieGoal} onChange={handleInputChange} />
              <input type="text" name="healthGoal" placeholder="Health Goal (e.g., weight loss)" value={preferences.healthGoal} onChange={handleInputChange} />
            </div>

            <div className="action-buttons">
              <button onClick={fetchRecommendations} disabled={loading || !preferences.age || !preferences.weight} className="primary-btn">
                {loading ? "Generating..." : "Get Personalized Plan"}
              </button>
              <button onClick={fetchTipOfTheDay} className="secondary-btn">
                Get Daily Tip
              </button>
            </div>
          </div>

          {tip && <div className="tip-section">💡 {tip}</div>}

          <div className="water-tracker">
            <h3>💧 Water Intake: {waterIntake}ml <small>(Recommended: {calculateRecommendedWater()}ml)</small></h3>
            <div className="water-buttons">
              <button onClick={addWaterGlass}>Add Glass (250ml)</button>
              <button onClick={resetWaterIntake}>Reset</button>
            </div>
          </div>

          <div className="search-section">
            <input type="text" placeholder="Search food/diet info..." value={searchQuery} onChange={(e) => setSearchQuery(e.target.value)} />
          </div>
        </div>

        {/* RIGHT SIDE */}
        <div className="food-diet-right">
          <div className="tabs">
            <button className={activeTab === "recommendations" ? "active" : ""} onClick={() => setActiveTab("recommendations")}>
              Meal Plan
            </button>
            <button className={activeTab === "favorites" ? "active" : ""} onClick={() => setActiveTab("favorites")}>
              Favorites ({favorites.length})
            </button>
            {nutritionSummary && (
              <button className={activeTab === "nutrition" ? "active" : ""} onClick={() => setActiveTab("nutrition")}>
                Nutrition
              </button>
            )}
          </div>

          {activeTab === "recommendations" && (
            <div className="recommendations-section">
              {recommendations.length > 0 ? (
                <>
                  <div className="export-actions">
                    <button className="export-pdf-btn" onClick={exportToPDF}>
                      Export as PDF
                    </button>
                  </div>
                  {recommendations
                    .filter((rec) => rec.toLowerCase().includes(searchQuery.toLowerCase()))
                    .map((rec, i) => (
                      <div key={i} className="food-card">
                        <p>{rec}</p>
                        {!rec.toLowerCase().includes("options") && (
                          <button className="favorite-btn" onClick={() => addToFavorites(rec)} disabled={favorites.includes(rec)}>
                            {favorites.includes(rec) ? "❤ Saved" : "♡ Save"}
                          </button>
                        )}
                      </div>
                    ))}
                </>
              ) : (
                <div className="empty-state">
                  <p>Enter your details and click "Get Personalized Plan"</p>
                </div>
              )}
            </div>
          )}

          {activeTab === "favorites" && (
            <div className="recommendations-section">
              {favorites.length > 0 ? (
                favorites.map((fav, i) => (
                  <div key={i} className="food-card">
                    <p>{fav}</p>
                    <button className="favorite-btn remove" onClick={() => removeFromFavorites(fav)}>❌ Remove</button>
                  </div>
                ))
              ) : (
                <div className="empty-state"><p>No favorites yet.</p></div>
              )}
            </div>
          )}

          {activeTab === "nutrition" && nutritionSummary && (
            <div className="nutrition-section">
              <div className="food-card">
                {nutritionSummary.split("\n").map((line, i) => <p key={i}>{line}</p>)}
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}
