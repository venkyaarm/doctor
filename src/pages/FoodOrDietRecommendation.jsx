import React, { useState, useEffect } from "react";
import "./FoodOrDietRecommendation.css";
import jsPDF from "jspdf";

export default function FoodOrDietRecommendation() {
  const [preferences, setPreferences] = useState({
    dietType: "veg",
    allergies: "",
    calorieGoal: "",
    age: "",
    weight: "",
    healthGoal: "",
  });
  const [searchQuery, setSearchQuery] = useState("");
  const [recommendations, setRecommendations] = useState([]);
  const [tip, setTip] = useState("");
  const [loading, setLoading] = useState(false);
  const [waterIntake, setWaterIntake] = useState(0);
  const [favorites, setFavorites] = useState([]);
  const [activeTab, setActiveTab] = useState("recommendations");
  const [nutritionSummary, setNutritionSummary] = useState(null);

  const GEMINI_API_KEY = "AIzaSyDsDZJmml18dqhEwVDPSoZdhesZStaBDJ0";

  useEffect(() => {
    const savedFavorites = localStorage.getItem("dietFavorites");
    if (savedFavorites) {
      setFavorites(JSON.parse(savedFavorites));
    }
    
    fetchTipOfTheDay();

    const savedWaterIntake = localStorage.getItem("waterIntake");
    if (savedWaterIntake) {
      setWaterIntake(parseInt(savedWaterIntake, 10));
    }
  }, []);

  const handleInputChange = (e) => {
    setPreferences({ ...preferences, [e.target.name]: e.target.value });
  };

  const exportToPDF = () => {
    const doc = new jsPDF();
    
    // Add title and date
    doc.setFontSize(20);
    doc.text("Personalized Diet Plan", 105, 15, { align: "center" });
    doc.setFontSize(10);
    doc.text(`Generated on: ${new Date().toLocaleDateString()}`, 105, 22, { align: "center" });
    
    // Add user details section
    doc.setFontSize(14);
    doc.text("Personal Information", 20, 35);
    doc.setFontSize(12);
    doc.text(`• Age: ${preferences.age || "Not specified"}`, 20, 45);
    doc.text(`• Weight: ${preferences.weight || "Not specified"} kg`, 20, 55);
    doc.text(`• Diet Type: ${getDietTypeLabel(preferences.dietType)}`, 20, 65);
    doc.text(`• Allergies: ${preferences.allergies || "None"}`, 20, 75);
    doc.text(`• Daily Calorie Goal: ${preferences.calorieGoal || "Not specified"} kcal`, 20, 85);
    doc.text(`• Health Goal: ${preferences.healthGoal || "Not specified"}`, 20, 95);
    
    // Add recommendations section
    let yPosition = 110;
    doc.setFontSize(14);
    doc.text("Diet Plan Recommendations", 20, yPosition);
    yPosition += 10;
    doc.setFontSize(12);
    
    recommendations.forEach(line => {
      if (yPosition > 270) {
        doc.addPage();
        yPosition = 20;
        doc.setFontSize(14);
        doc.text("Diet Plan Recommendations (continued)", 20, yPosition);
        yPosition += 10;
        doc.setFontSize(12);
      }
      
      // Style section headers differently
      if (line.includes("options") || line.includes("snacks")) {
        doc.setFont("helvetica", "bold");
        doc.setTextColor(40, 180, 99); // Green color for headings
        doc.text(line, 20, yPosition);
        doc.setFont("helvetica", "normal");
        doc.setTextColor(0, 0, 0); // Black color for normal text
      } else {
        doc.text(`- ${line}`, 20, yPosition);
      }
      yPosition += 7;
    });
    
    // Add nutrition summary if available
    if (nutritionSummary) {
      if (yPosition > 250) {
        doc.addPage();
        yPosition = 20;
      }
      doc.setFontSize(14);
      doc.text("Nutrition Summary", 20, yPosition);
      yPosition += 10;
      doc.setFontSize(12);
      
      nutritionSummary.split("\n").forEach(line => {
        if (yPosition > 270) {
          doc.addPage();
          yPosition = 20;
        }
        doc.text(line, 20, yPosition);
        yPosition += 7;
      });
    }
    
    // Add water intake section
    if (yPosition > 250) {
      doc.addPage();
      yPosition = 20;
    }
    doc.setFontSize(14);
    doc.text("Hydration Tracking", 20, yPosition);
    yPosition += 10;
    doc.setFontSize(12);
    doc.text(`• Current Water Intake: ${waterIntake}ml`, 20, yPosition);
    yPosition += 7;
    doc.text(`• Recommended Daily Intake: ${calculateRecommendedWater()}ml`, 20, yPosition);
    
    // Add footer
    doc.setFontSize(10);
    doc.setTextColor(100);
    doc.text("Generated by Health App - For informational purposes only", 105, 285, { align: "center" });
    
    // Save the PDF
    doc.save(`diet-plan-${new Date().toISOString().slice(0,10)}.pdf`);
  };

  const calculateRecommendedWater = () => {
    const weight = parseInt(preferences.weight) || 70; // Default to 70kg if not specified
    return Math.round(weight * 30); // 30ml per kg of body weight
  };

  const getDietTypeLabel = (value) => {
    switch(value) {
      case "veg": return "Vegetarian";
      case "non-veg": return "Non-Vegetarian";
      case "vegan": return "Vegan";
      case "keto": return "Keto";
      default: return value;
    }
  };

  const fetchRecommendations = async () => {
    setLoading(true);
    try {
      const prompt = `
        Provide a personalized food and diet plan for:
        Age: ${preferences.age}
        Weight: ${preferences.weight} kg
        Diet type: ${preferences.dietType}
        Allergies: ${preferences.allergies || "None"}
        Calorie Goal: ${preferences.calorieGoal} kcal/day
        Health Goal: ${preferences.healthGoal}
        
        Include these sections with at least 3 items each:
        - Breakfast options
        - Lunch options
        - Dinner options
        - Healthy snacks
        - Nutrition summary (total calories, protein, carbs, fat)
        
        Format each item with emoji and separate sections with headings.
        Make it easy to understand with clear measurements.
      `;

      const response = await fetch(
        `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${GEMINI_API_KEY}`,
        {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            contents: [{ parts: [{ text: prompt }] }],
          }),
        }
      );

      const data = await response.json();
      if (data?.candidates?.[0]?.content?.parts?.[0]?.text) {
        const output = data.candidates[0].content.parts[0].text;
        const lines = output.split("\n").filter(Boolean);
        
        const summaryIndex = lines.findIndex(line => line.includes("Nutrition Summary"));
        
        setRecommendations(lines.slice(0, summaryIndex !== -1 ? summaryIndex : lines.length));
        
        if (summaryIndex !== -1) {
          setNutritionSummary(lines.slice(summaryIndex).join("\n"));
        } else {
          setNutritionSummary(null);
        }
      } else {
        setRecommendations(["No recommendations found."]);
        setNutritionSummary(null);
      }
    } catch (error) {
      console.error(error);
      setRecommendations(["Error fetching recommendations."]);
      setNutritionSummary(null);
    }
    setLoading(false);
  };

  const fetchTipOfTheDay = async () => {
    try {
      const prompt = "Give me a short healthy eating tip in one sentence.";
      const response = await fetch(
        `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${GEMINI_API_KEY}`,
        {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            contents: [{ parts: [{ text: prompt }] }],
          }),
        }
      );
      const data = await response.json();
      if (data?.candidates?.[0]?.content?.parts?.[0]?.text) {
        setTip(data.candidates[0].content.parts[0].text);
      }
    } catch (error) {
      console.error(error);
    }
  };

  const addToFavorites = (item) => {
    if (!favorites.includes(item)) {
      const newFavorites = [...favorites, item];
      setFavorites(newFavorites);
      localStorage.setItem("dietFavorites", JSON.stringify(newFavorites));
    }
  };

  const removeFromFavorites = (item) => {
    const newFavorites = favorites.filter(fav => fav !== item);
    setFavorites(newFavorites);
    localStorage.setItem("dietFavorites", JSON.stringify(newFavorites));
  };

  const addWaterGlass = () => {
    setWaterIntake(prev => {
      const newIntake = prev + 250; // 250ml per glass
      localStorage.setItem("waterIntake", newIntake.toString());
      return newIntake;
    });
  };

  const resetWaterIntake = () => {
    setWaterIntake(0);
    localStorage.setItem("waterIntake", "0");
  };

  return (
    <div className="main-content">
      <h1 className="main-heading">Food & Diet Recommendation</h1>
      <div className="food-diet-container">
        <div className="form-section">
          <h2>🥗 Personalized Nutrition Planner</h2>

          <div className="input-grid">
            <input
              type="number"
              name="age"
              placeholder="Age"
              value={preferences.age}
              onChange={handleInputChange}
              min="1"
              max="120"
            />
            <input
              type="number"
              name="weight"
              placeholder="Weight (kg)"
              value={preferences.weight}
              onChange={handleInputChange}
              min="1"
              max="300"
            />
            <select
              name="dietType"
              value={preferences.dietType}
              onChange={handleInputChange}
            >
              <option value="veg">Vegetarian</option>
              <option value="non-veg">Non-Vegetarian</option>
              <option value="vegan">Vegan</option>
              <option value="keto">Keto</option>
              <option value="paleo">Paleo</option>
              <option value="mediterranean">Mediterranean</option>
            </select>
            <input
              type="text"
              name="allergies"
              placeholder="Allergies (optional)"
              value={preferences.allergies}
              onChange={handleInputChange}
            />
            <input
              type="number"
              name="calorieGoal"
              placeholder="Daily Calorie Goal (kcal)"
              value={preferences.calorieGoal}
              onChange={handleInputChange}
              min="800"
              max="5000"
            />
            <input
              type="text"
              name="healthGoal"
              placeholder="Health Goal (e.g., weight loss)"
              value={preferences.healthGoal}
              onChange={handleInputChange}
            />
          </div>

          <div className="action-buttons">
            <button 
              onClick={fetchRecommendations} 
              disabled={loading || !preferences.age || !preferences.weight}
              className="primary-btn"
            >
              {loading ? "Generating..." : "Get Personalized Plan"}
            </button>
            <button onClick={fetchTipOfTheDay} className="secondary-btn">
              Get Daily Tip
            </button>
          </div>
        </div>

        {tip && (
          <div className="tip-section">
            <span role="img" aria-label="light bulb">💡</span> {tip}
          </div>
        )}

        <div className="water-tracker">
          <h3>
            <span role="img" aria-label="water drop">💧</span> Water Intake: {waterIntake}ml
            <small> (Recommended: {calculateRecommendedWater()}ml)</small>
          </h3>
          <div className="water-buttons">
            <button onClick={addWaterGlass}>Add Glass (250ml)</button>
            <button onClick={resetWaterIntake}>Reset</button>
          </div>
        </div>

        <div className="search-section">
          <input
            type="text"
            placeholder="Search food/diet info..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
          />
        </div>

        <div className="tabs">
          <button 
            className={activeTab === "recommendations" ? "active" : ""}
            onClick={() => setActiveTab("recommendations")}
          >
            Meal Plan
          </button>
          <button 
            className={activeTab === "favorites" ? "active" : ""}
            onClick={() => setActiveTab("favorites")}
          >
            Favorites ({favorites.length})
          </button>
          {nutritionSummary && (
            <button 
              className={activeTab === "nutrition" ? "active" : ""}
              onClick={() => setActiveTab("nutrition")}
            >
              Nutrition
            </button>
          )}
        </div>

        {activeTab === "recommendations" && (
          <div className="recommendations-section">
            {recommendations.length > 0 ? (
              <>
                <div className="export-actions">
                  <button 
                    className="export-pdf-btn"
                    onClick={exportToPDF}
                    disabled={recommendations.length === 0}
                  >
                    Export as PDF
                  </button>
                </div>
                {recommendations
                  .filter((rec) =>
                    rec.toLowerCase().includes(searchQuery.toLowerCase())
                  )
                  .map((rec, i) => (
                    <div key={i} className="food-card">
                      <p>{rec}</p>
                      {!(rec.includes("options") || rec.includes("Nutrition")) && (
                        <button 
                          className="favorite-btn"
                          onClick={() => addToFavorites(rec)}
                          disabled={favorites.includes(rec)}
                          aria-label={favorites.includes(rec) ? "Remove from favorites" : "Add to favorites"}
                        >
                          {favorites.includes(rec) ? "❤️ Saved" : "♡ Save"}
                        </button>
                      )}
                    </div>
                  ))}
              </>
            ) : (
              <div className="empty-state">
                <p>Enter your details and click "Get Personalized Plan" to see recommendations</p>
              </div>
            )}
          </div>
        )}

        {activeTab === "favorites" && (
          <div className="recommendations-section">
            {favorites.length > 0 ? (
              favorites
                .filter((fav) =>
                  fav.toLowerCase().includes(searchQuery.toLowerCase())
                )
                .map((fav, i) => (
                  <div key={i} className="food-card">
                    <p>{fav}</p>
                    <button 
                      className="favorite-btn remove"
                      onClick={() => removeFromFavorites(fav)}
                      aria-label="Remove from favorites"
                    >
                      ❌ Remove
                    </button>
                  </div>
                ))
            ) : (
              <div className="empty-state">
                <p>No favorites yet. Save items from your recommendations!</p>
              </div>
            )}
          </div>
        )}

        {activeTab === "nutrition" && nutritionSummary && (
          <div className="nutrition-section">
            <div className="food-card">
              {nutritionSummary.split("\n").map((line, i) => (
                <p key={i}>{line}</p>
              ))}
            </div>
          </div>
        )}
      </div>
    </div>
  );
}