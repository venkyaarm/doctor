import React, { useState, useEffect } from "react";
import "./FoodOrDietRecommendation.css";
import jsPDF from "jspdf";
import autoTable from "jspdf-autotable";

export default function FoodOrDietRecommendation() {
  const [preferences, setPreferences] = useState({
    dietType: "veg",
    allergies: "",
    calorieGoal: "",
    age: "",
    weight: "",
    healthGoal: "",
  });
  const [searchQuery, setSearchQuery] = useState("");
  const [recommendations, setRecommendations] = useState([]);
  const [tip, setTip] = useState("");
  const [loading, setLoading] = useState(false);
  const [waterIntake, setWaterIntake] = useState(0);
  const [favorites, setFavorites] = useState([]);
  const [activeTab, setActiveTab] = useState("recommendations");
  const [nutritionSummary, setNutritionSummary] = useState(null);

  const GEMINI_API_KEY = "AIzaSyDsDZJmml18dqhEwVDPSoZdhesZStaBDJ0";

  useEffect(() => {
    const savedFavorites = localStorage.getItem("dietFavorites");
    if (savedFavorites) setFavorites(JSON.parse(savedFavorites));

    const savedWaterIntake = localStorage.getItem("waterIntake");
    if (savedWaterIntake) setWaterIntake(parseInt(savedWaterIntake, 10));

    fetchTipOfTheDay();
  }, []);

  const handleInputChange = (e) => {
    setPreferences({ ...preferences, [e.target.name]: e.target.value });
  };

  const calculateRecommendedWater = () => {
    const weight = parseInt(preferences.weight) || 70;
    return Math.round(weight * 30);
  };

  const getDietTypeLabel = (value) => {
    const labels = {
      veg: "Vegetarian",
      "non-veg": "Non-Vegetarian",
      vegan: "Vegan",
      keto: "Keto",
      paleo: "Paleo",
      mediterranean: "Mediterranean",
    };
    return labels[value] || value;
  };

  const exportToPDF = () => {
    const doc = new jsPDF();

    doc.setFontSize(20);
    doc.text("Personalized Diet Plan", 105, 15, { align: "center" });
    doc.setFontSize(10);
    doc.text(`Generated on: ${new Date().toLocaleDateString()}`, 105, 22, { align: "center" });

    autoTable(doc, {
      startY: 30,
      head: [["Personal Information", ""]],
      body: [
        ["Age", preferences.age || "Not specified"],
        ["Weight", `${preferences.weight || "Not specified"} kg`],
        ["Diet Type", getDietTypeLabel(preferences.dietType)],
        ["Allergies", preferences.allergies || "None"],
        ["Calorie Goal", `${preferences.calorieGoal || "Not specified"} kcal`],
        ["Health Goal", preferences.healthGoal || "Not specified"],
      ],
      theme: "grid",
      styles: { fontSize: 11, cellPadding: 3 },
    });

    if (recommendations.length > 0) {
      autoTable(doc, {
        startY: doc.lastAutoTable.finalY + 10,
        head: [["Diet Plan Recommendations"]],
        body: recommendations.map((line) => [line]),
        theme: "grid",
        styles: { fontSize: 11, cellWidth: "wrap" },
      });
    }

    if (nutritionSummary) {
      autoTable(doc, {
        startY: doc.lastAutoTable.finalY + 10,
        head: [["Nutrition Summary"]],
        body: nutritionSummary.split("\n").map((line) => [line]),
        theme: "grid",
        styles: { fontSize: 11, cellWidth: "wrap" },
      });
    }

    autoTable(doc, {
      startY: doc.lastAutoTable.finalY + 10,
      head: [["Hydration Tracking", ""]],
      body: [
        ["Current Water Intake", `${waterIntake}ml`],
        ["Recommended Daily Intake", `${calculateRecommendedWater()}ml`],
      ],
      theme: "grid",
      styles: { fontSize: 11, cellPadding: 3 },
    });

    doc.setFontSize(10).setTextColor(100);
    doc.text("Generated by Health App - For informational purposes only", 105, 285, { align: "center" });

    doc.save(`diet-plan-${new Date().toISOString().slice(0, 10)}.pdf`);
  };

  const fetchRecommendations = async () => {
    if (!preferences.age || !preferences.weight) return;
    setLoading(true);
    try {
      const prompt = `Provide a personalized diet plan for:
        Age: ${preferences.age}
        Weight: ${preferences.weight}kg
        Diet type: ${preferences.dietType}
        Allergies: ${preferences.allergies || "None"}
        Calorie Goal: ${preferences.calorieGoal || "Not specified"}
        Health Goal: ${preferences.healthGoal || "Not specified"}
        Include: Breakfast, Lunch, Dinner, Snacks, Nutrition summary.`;

      const response = await fetch(
        `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${GEMINI_API_KEY}`,
        {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ contents: [{ parts: [{ text: prompt }] }] }),
        }
      );

      const data = await response.json();
      const output = data?.candidates?.[0]?.content?.parts?.[0]?.text;
      if (output) {
        const lines = output.split("\n").filter(Boolean);
        const summaryIndex = lines.findIndex((line) => /nutrition summary/i.test(line));

        setRecommendations(lines.slice(0, summaryIndex !== -1 ? summaryIndex : lines.length));
        setNutritionSummary(summaryIndex !== -1 ? lines.slice(summaryIndex).join("\n") : null);
        setActiveTab("recommendations");
      } else {
        setRecommendations(["No recommendations found."]);
        setNutritionSummary(null);
      }
    } catch (error) {
      console.error(error);
      setRecommendations(["Error fetching recommendations."]);
      setNutritionSummary(null);
    } finally {
      setLoading(false);
    }
  };

  const fetchTipOfTheDay = async () => {
    try {
      const response = await fetch(
        `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${GEMINI_API_KEY}`,
        {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ contents: [{ parts: [{ text: "Give me a short healthy eating tip in one sentence." }] }] }),
        }
      );
      const data = await response.json();
      const newTip = data?.candidates?.[0]?.content?.parts?.[0]?.text;
      if (newTip) setTip(newTip);
    } catch (error) {
      console.error(error);
    }
  };

  const addToFavorites = (item) => {
    if (!favorites.includes(item)) {
      const newFavorites = [...favorites, item];
      setFavorites(newFavorites);
      localStorage.setItem("dietFavorites", JSON.stringify(newFavorites));
    }
  };

  const removeFromFavorites = (item) => {
    const newFavorites = favorites.filter((fav) => fav !== item);
    setFavorites(newFavorites);
    localStorage.setItem("dietFavorites", JSON.stringify(newFavorites));
  };

  const addWaterGlass = () => {
    setWaterIntake((prev) => {
      const newIntake = prev + 250;
      localStorage.setItem("waterIntake", newIntake.toString());
      return newIntake;
    });
  };

  const resetWaterIntake = () => {
    setWaterIntake(0);
    localStorage.setItem("waterIntake", "0");
  };

  return (
    <div className="main-content">
      <h1 className="main-heading">ü•ó Food & Diet Recommendation</h1>

      <div className="food-diet-layout">
        {/* LEFT SIDE */}
        <div className="food-diet-left">
          <div className="form-section">
            <h2>üç¥ Personalized Nutrition Planner</h2>

            <div className="input-grid">
              <input type="number" name="age" placeholder="Age" value={preferences.age} onChange={handleInputChange} />
              <input type="number" name="weight" placeholder="Weight (kg)" value={preferences.weight} onChange={handleInputChange} />
              <select name="dietType" value={preferences.dietType} onChange={handleInputChange}>
                <option value="veg">Vegetarian</option>
                <option value="non-veg">Non-Vegetarian</option>
                <option value="vegan">Vegan</option>
                <option value="keto">Keto</option>
                <option value="paleo">Paleo</option>
                <option value="mediterranean">Mediterranean</option>
              </select>
              <input type="text" name="allergies" placeholder="Allergies (optional)" value={preferences.allergies} onChange={handleInputChange} />
              <input type="number" name="calorieGoal" placeholder="Daily Calorie Goal (kcal)" value={preferences.calorieGoal} onChange={handleInputChange} />
              <input type="text" name="healthGoal" placeholder="Health Goal (e.g., weight loss)" value={preferences.healthGoal} onChange={handleInputChange} />
            </div>

            <div className="action-buttons">
              <button onClick={fetchRecommendations} disabled={loading} className="primary-btn">
                {loading ? "Generating..." : "Get Personalized Plan"}
              </button>
              <button onClick={fetchTipOfTheDay} className="secondary-btn">Get Daily Tip</button>
            </div>
          </div>

          {tip && <div className="tip-section">üí° {tip}</div>}

          <div className="water-tracker">
            <h3>üíß Water Intake: {waterIntake}ml <small>(Recommended: {calculateRecommendedWater()}ml)</small></h3>
            <div className="water-buttons">
              <button onClick={addWaterGlass}>+ Add Glass (250ml)</button>
              <button onClick={resetWaterIntake}>Reset</button>
            </div>
          </div>

          <div className="search-section">
            <input type="text" placeholder="Search food/diet info..." value={searchQuery} onChange={(e) => setSearchQuery(e.target.value)} />
          </div>
        </div>

        {/* RIGHT SIDE */}
        <div className="food-diet-right">
          <div className="tabs">
            <button className={activeTab === "recommendations" ? "active" : ""} onClick={() => setActiveTab("recommendations")}>
              Meal Plan
            </button>
            <button className={activeTab === "favorites" ? "active" : ""} onClick={() => setActiveTab("favorites")}>
              Favorites ({favorites.length})
            </button>
            {nutritionSummary && (
              <button className={activeTab === "nutrition" ? "active" : ""} onClick={() => setActiveTab("nutrition")}>
                Nutrition
              </button>
            )}
          </div>

          {activeTab === "recommendations" && (
            <div className="recommendations-section">
              {recommendations.length > 0 ? (
                <>
                  <div className="export-actions">
                    <button className="export-pdf-btn" onClick={exportToPDF}>Export as PDF</button>
                  </div>
                  {recommendations
                    .filter((rec) => rec.toLowerCase().includes(searchQuery.toLowerCase()))
                    .map((rec, i) => (
                      <div key={i} className="food-card">
                        <p>{rec}</p>
                        {!/options|snacks/i.test(rec) && (
                          <button className="favorite-btn" onClick={() => addToFavorites(rec)} disabled={favorites.includes(rec)}>
                            {favorites.includes(rec) ? "‚ù§Ô∏è Saved" : "ü§ç Save"}
                          </button>
                        )}
                      </div>
                    ))}
                </>
              ) : (
                <div className="empty-state"><p>Enter your details and click "Get Personalized Plan"</p></div>
              )}
            </div>
          )}

          {activeTab === "favorites" && (
            <div className="recommendations-section">
              {favorites.length > 0 ? (
                favorites.map((fav, i) => (
                  <div key={i} className="food-card">
                    <p>{fav}</p>
                    <button className="favorite-btn remove" onClick={() => removeFromFavorites(fav)}>‚ùå Remove</button>
                  </div>
                ))
              ) : (
                <div className="empty-state"><p>No favorites yet.</p></div>
              )}
            </div>
          )}

          {activeTab === "nutrition" && nutritionSummary && (
            <div className="nutrition-section">
              <table className="nutrition-table">
                <tbody>
                  {nutritionSummary.split("\n").map((line, i) => (
                    <tr key={i}>
                      <td>{line}</td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}
