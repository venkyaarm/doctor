import React, { useState } from "react";
import "./FoodOrDietRecommendation.css";

export default function FoodOrDietRecommendation() {
  const [preferences, setPreferences] = useState({
    dietType: "veg",
    allergies: "",
    calorieGoal: "",
    age: "",
    weight: "",
    healthGoal: "",
  });
  const [searchQuery, setSearchQuery] = useState("");
  const [recommendations, setRecommendations] = useState([]);
  const [tip, setTip] = useState("");
  const [loading, setLoading] = useState(false);

  const GEMINI_API_KEY = "AIzaSyDsDZJmml18dqhEwVDPSoZdhesZStaBDJ0";

  const handleInputChange = (e) => {
    setPreferences({ ...preferences, [e.target.name]: e.target.value });
  };

  const fetchRecommendations = async () => {
    setLoading(true);
    try {
      const prompt = `
        Provide a personalized food and diet plan for:
        Age: ${preferences.age}
        Weight: ${preferences.weight} kg
        Diet type: ${preferences.dietType}
        Allergies: ${preferences.allergies || "None"}
        Calorie Goal: ${preferences.calorieGoal} kcal/day
        Health Goal: ${preferences.healthGoal}
        Include Breakfast, Lunch, Dinner, Snacks.
        Give nutrition facts and make it easy to understand.
      `;

      const response = await fetch(
        `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${GEMINI_API_KEY}`,
        {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            contents: [{ parts: [{ text: prompt }] }],
          }),
        }
      );

      const data = await response.json();
      if (data?.candidates?.[0]?.content?.parts?.[0]?.text) {
        const output = data.candidates[0].content.parts[0].text;
        setRecommendations(output.split("\n").filter(Boolean));
      } else {
        setRecommendations(["No recommendations found."]);
      }
    } catch (error) {
      console.error(error);
      setRecommendations(["Error fetching recommendations."]);
    }
    setLoading(false);
  };

  const fetchTipOfTheDay = async () => {
    try {
      const prompt = "Give me a short healthy eating tip in one sentence.";
      const response = await fetch(
        `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${GEMINI_API_KEY}`,
        {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            contents: [{ parts: [{ text: prompt }] }],
          }),
        }
      );
      const data = await response.json();
      if (data?.candidates?.[0]?.content?.parts?.[0]?.text) {
        setTip(data.candidates[0].content.parts[0].text);
      }
    } catch (error) {
      console.error(error);
    }
  };

  return (
    <div className="food-diet-container">
      <div className="form-section">
        <h2>ü•ó Food & Diet Recommendation</h2>

        <input
          type="text"
          name="age"
          placeholder="Age"
          value={preferences.age}
          onChange={handleInputChange}
        />
        <input
          type="text"
          name="weight"
          placeholder="Weight (kg)"
          value={preferences.weight}
          onChange={handleInputChange}
        />
        <select
          name="dietType"
          value={preferences.dietType}
          onChange={handleInputChange}
        >
          <option value="veg">Vegetarian</option>
          <option value="non-veg">Non-Vegetarian</option>
        </select>
        <input
          type="text"
          name="allergies"
          placeholder="Allergies (optional)"
          value={preferences.allergies}
          onChange={handleInputChange}
        />
        <input
          type="number"
          name="calorieGoal"
          placeholder="Calorie Goal (kcal)"
          value={preferences.calorieGoal}
          onChange={handleInputChange}
        />
        <input
          type="text"
          name="healthGoal"
          placeholder="Health Goal (e.g., weight loss)"
          value={preferences.healthGoal}
          onChange={handleInputChange}
        />

        <button onClick={fetchRecommendations} disabled={loading}>
          {loading ? "Generating..." : "Get Recommendations"}
        </button>
        <button onClick={fetchTipOfTheDay}>Tip of the Day</button>
      </div>

      {tip && <div className="tip-section">üí° {tip}</div>}

      <div className="search-section">
        <input
          type="text"
          placeholder="Search food/diet info..."
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)}
        />
      </div>

      <div className="recommendations-section">
        <h3>üçΩ Your Meal Plan</h3>
        {recommendations.length > 0 &&
          recommendations
            .filter((rec) =>
              rec.toLowerCase().includes(searchQuery.toLowerCase())
            )
            .map((rec, i) => (
              <div key={i} className="food-card">
                {rec}
              </div>
            ))}
      </div>
    </div>
  );
}
